// ðŸ›  Cursor Work Request: getCapabilityGaps(profileId, targetRoleId)

// Objective:
// Implement the getCapabilityGaps(profileId, targetRoleId) function to return a detailed comparison between a Profile's capabilities and those required by a target Role. The result should identify which capabilities are missing or underdeveloped.

// âœ… Requirements

// - Be lightweight and fast (ideally one SQL call with joins).
// - Be pure (no side effects).
// - This will be used in the MCP to get the context of a profile.
// - It shouldn't be an edge function, but a shared library function.
// - Refactor code as necessary to avoid DRY violations.

// Function Signature:
async function getCapabilityGaps(profileId: string, targetRoleId: string): Promise<CapabilityGap[]> {}

// Expected Output Structure:
type CapabilityGap = {
  capabilityId: string;
  name: string;
  requiredLevel?: string; // From Role definition
  profileLevel?: string;  // From Profile context
  gapType: 'missing' | 'insufficient' | 'met';
};

// ðŸ§± Source Tables
// - profile_capabilities (join table)
// - capabilities
// - role_capabilities (join table)
// - roles

// ðŸ§  Notes
// - Match capabilities by ID, compare levels (if present)
// - Include those required by role but not held by profile (gapType = 'missing')
// - Include held capabilities at a lower level than required (gapType = 'insufficient')
// - Optionally include 'met' capabilities if needed for full context
// - Sort or group by severity of gap if useful for UI
// - Consider using shared helper to normalize levels (e.g. 'Basic', 'Proficient', 'Expert')
